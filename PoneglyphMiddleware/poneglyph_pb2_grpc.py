# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import poneglyph_pb2 as poneglyph__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in poneglyph_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class WorkerManagementServiceStub(object):
    """Worker Management Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterWorker = channel.unary_unary(
                '/poneglyph.WorkerManagementService/RegisterWorker',
                request_serializer=poneglyph__pb2.RegisterWorkerRequest.SerializeToString,
                response_deserializer=poneglyph__pb2.RegisterWorkerResponse.FromString,
                _registered_method=True)
        self.SendHeartbeat = channel.unary_unary(
                '/poneglyph.WorkerManagementService/SendHeartbeat',
                request_serializer=poneglyph__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=poneglyph__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.GetWorkerStatus = channel.unary_unary(
                '/poneglyph.WorkerManagementService/GetWorkerStatus',
                request_serializer=poneglyph__pb2.WorkerStatusRequest.SerializeToString,
                response_deserializer=poneglyph__pb2.WorkerStatusResponse.FromString,
                _registered_method=True)
        self.UnregisterWorker = channel.unary_unary(
                '/poneglyph.WorkerManagementService/UnregisterWorker',
                request_serializer=poneglyph__pb2.UnregisterWorkerRequest.SerializeToString,
                response_deserializer=poneglyph__pb2.UnregisterWorkerResponse.FromString,
                _registered_method=True)


class WorkerManagementServiceServicer(object):
    """Worker Management Service
    """

    def RegisterWorker(self, request, context):
        """Worker registration and health checks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkerStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkerManagementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWorker,
                    request_deserializer=poneglyph__pb2.RegisterWorkerRequest.FromString,
                    response_serializer=poneglyph__pb2.RegisterWorkerResponse.SerializeToString,
            ),
            'SendHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.SendHeartbeat,
                    request_deserializer=poneglyph__pb2.HeartbeatRequest.FromString,
                    response_serializer=poneglyph__pb2.HeartbeatResponse.SerializeToString,
            ),
            'GetWorkerStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkerStatus,
                    request_deserializer=poneglyph__pb2.WorkerStatusRequest.FromString,
                    response_serializer=poneglyph__pb2.WorkerStatusResponse.SerializeToString,
            ),
            'UnregisterWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterWorker,
                    request_deserializer=poneglyph__pb2.UnregisterWorkerRequest.FromString,
                    response_serializer=poneglyph__pb2.UnregisterWorkerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'poneglyph.WorkerManagementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('poneglyph.WorkerManagementService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WorkerManagementService(object):
    """Worker Management Service
    """

    @staticmethod
    def RegisterWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/poneglyph.WorkerManagementService/RegisterWorker',
            poneglyph__pb2.RegisterWorkerRequest.SerializeToString,
            poneglyph__pb2.RegisterWorkerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/poneglyph.WorkerManagementService/SendHeartbeat',
            poneglyph__pb2.HeartbeatRequest.SerializeToString,
            poneglyph__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWorkerStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/poneglyph.WorkerManagementService/GetWorkerStatus',
            poneglyph__pb2.WorkerStatusRequest.SerializeToString,
            poneglyph__pb2.WorkerStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnregisterWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/poneglyph.WorkerManagementService/UnregisterWorker',
            poneglyph__pb2.UnregisterWorkerRequest.SerializeToString,
            poneglyph__pb2.UnregisterWorkerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TaskDistributionServiceStub(object):
    """Task Distribution Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestTask = channel.unary_unary(
                '/poneglyph.TaskDistributionService/RequestTask',
                request_serializer=poneglyph__pb2.TaskRequest.SerializeToString,
                response_deserializer=poneglyph__pb2.TaskResponse.FromString,
                _registered_method=True)
        self.CompleteTask = channel.unary_unary(
                '/poneglyph.TaskDistributionService/CompleteTask',
                request_serializer=poneglyph__pb2.TaskCompletionRequest.SerializeToString,
                response_deserializer=poneglyph__pb2.TaskCompletionResponse.FromString,
                _registered_method=True)
        self.ReportTaskProgress = channel.unary_unary(
                '/poneglyph.TaskDistributionService/ReportTaskProgress',
                request_serializer=poneglyph__pb2.TaskProgressRequest.SerializeToString,
                response_deserializer=poneglyph__pb2.TaskProgressResponse.FromString,
                _registered_method=True)


class TaskDistributionServiceServicer(object):
    """Task Distribution Service
    """

    def RequestTask(self, request, context):
        """Task assignment and completion
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportTaskProgress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskDistributionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestTask': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestTask,
                    request_deserializer=poneglyph__pb2.TaskRequest.FromString,
                    response_serializer=poneglyph__pb2.TaskResponse.SerializeToString,
            ),
            'CompleteTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteTask,
                    request_deserializer=poneglyph__pb2.TaskCompletionRequest.FromString,
                    response_serializer=poneglyph__pb2.TaskCompletionResponse.SerializeToString,
            ),
            'ReportTaskProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportTaskProgress,
                    request_deserializer=poneglyph__pb2.TaskProgressRequest.FromString,
                    response_serializer=poneglyph__pb2.TaskProgressResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'poneglyph.TaskDistributionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('poneglyph.TaskDistributionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TaskDistributionService(object):
    """Task Distribution Service
    """

    @staticmethod
    def RequestTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/poneglyph.TaskDistributionService/RequestTask',
            poneglyph__pb2.TaskRequest.SerializeToString,
            poneglyph__pb2.TaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CompleteTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/poneglyph.TaskDistributionService/CompleteTask',
            poneglyph__pb2.TaskCompletionRequest.SerializeToString,
            poneglyph__pb2.TaskCompletionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportTaskProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/poneglyph.TaskDistributionService/ReportTaskProgress',
            poneglyph__pb2.TaskProgressRequest.SerializeToString,
            poneglyph__pb2.TaskProgressResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class JobManagementServiceStub(object):
    """Job Management Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitJob = channel.unary_unary(
                '/poneglyph.JobManagementService/SubmitJob',
                request_serializer=poneglyph__pb2.SubmitJobRequest.SerializeToString,
                response_deserializer=poneglyph__pb2.SubmitJobResponse.FromString,
                _registered_method=True)
        self.GetJobStatus = channel.unary_unary(
                '/poneglyph.JobManagementService/GetJobStatus',
                request_serializer=poneglyph__pb2.JobStatusRequest.SerializeToString,
                response_deserializer=poneglyph__pb2.JobStatusResponse.FromString,
                _registered_method=True)
        self.GetJobResult = channel.unary_unary(
                '/poneglyph.JobManagementService/GetJobResult',
                request_serializer=poneglyph__pb2.JobResultRequest.SerializeToString,
                response_deserializer=poneglyph__pb2.JobResultResponse.FromString,
                _registered_method=True)
        self.CancelJob = channel.unary_unary(
                '/poneglyph.JobManagementService/CancelJob',
                request_serializer=poneglyph__pb2.CancelJobRequest.SerializeToString,
                response_deserializer=poneglyph__pb2.CancelJobResponse.FromString,
                _registered_method=True)


class JobManagementServiceServicer(object):
    """Job Management Service
    """

    def SubmitJob(self, request, context):
        """Job lifecycle management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJobStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJobResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JobManagementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitJob': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitJob,
                    request_deserializer=poneglyph__pb2.SubmitJobRequest.FromString,
                    response_serializer=poneglyph__pb2.SubmitJobResponse.SerializeToString,
            ),
            'GetJobStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJobStatus,
                    request_deserializer=poneglyph__pb2.JobStatusRequest.FromString,
                    response_serializer=poneglyph__pb2.JobStatusResponse.SerializeToString,
            ),
            'GetJobResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJobResult,
                    request_deserializer=poneglyph__pb2.JobResultRequest.FromString,
                    response_serializer=poneglyph__pb2.JobResultResponse.SerializeToString,
            ),
            'CancelJob': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelJob,
                    request_deserializer=poneglyph__pb2.CancelJobRequest.FromString,
                    response_serializer=poneglyph__pb2.CancelJobResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'poneglyph.JobManagementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('poneglyph.JobManagementService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class JobManagementService(object):
    """Job Management Service
    """

    @staticmethod
    def SubmitJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/poneglyph.JobManagementService/SubmitJob',
            poneglyph__pb2.SubmitJobRequest.SerializeToString,
            poneglyph__pb2.SubmitJobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetJobStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/poneglyph.JobManagementService/GetJobStatus',
            poneglyph__pb2.JobStatusRequest.SerializeToString,
            poneglyph__pb2.JobStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetJobResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/poneglyph.JobManagementService/GetJobResult',
            poneglyph__pb2.JobResultRequest.SerializeToString,
            poneglyph__pb2.JobResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/poneglyph.JobManagementService/CancelJob',
            poneglyph__pb2.CancelJobRequest.SerializeToString,
            poneglyph__pb2.CancelJobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ResourceManagementServiceStub(object):
    """Resource Management Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetClusterResources = channel.unary_unary(
                '/poneglyph.ResourceManagementService/GetClusterResources',
                request_serializer=poneglyph__pb2.ClusterResourcesRequest.SerializeToString,
                response_deserializer=poneglyph__pb2.ClusterResourcesResponse.FromString,
                _registered_method=True)
        self.AllocateResources = channel.unary_unary(
                '/poneglyph.ResourceManagementService/AllocateResources',
                request_serializer=poneglyph__pb2.ResourceAllocationRequest.SerializeToString,
                response_deserializer=poneglyph__pb2.ResourceAllocationResponse.FromString,
                _registered_method=True)
        self.ReleaseResources = channel.unary_unary(
                '/poneglyph.ResourceManagementService/ReleaseResources',
                request_serializer=poneglyph__pb2.ResourceReleaseRequest.SerializeToString,
                response_deserializer=poneglyph__pb2.ResourceReleaseResponse.FromString,
                _registered_method=True)


class ResourceManagementServiceServicer(object):
    """Resource Management Service
    """

    def GetClusterResources(self, request, context):
        """Resource monitoring and allocation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllocateResources(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseResources(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResourceManagementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetClusterResources': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClusterResources,
                    request_deserializer=poneglyph__pb2.ClusterResourcesRequest.FromString,
                    response_serializer=poneglyph__pb2.ClusterResourcesResponse.SerializeToString,
            ),
            'AllocateResources': grpc.unary_unary_rpc_method_handler(
                    servicer.AllocateResources,
                    request_deserializer=poneglyph__pb2.ResourceAllocationRequest.FromString,
                    response_serializer=poneglyph__pb2.ResourceAllocationResponse.SerializeToString,
            ),
            'ReleaseResources': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseResources,
                    request_deserializer=poneglyph__pb2.ResourceReleaseRequest.FromString,
                    response_serializer=poneglyph__pb2.ResourceReleaseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'poneglyph.ResourceManagementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('poneglyph.ResourceManagementService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ResourceManagementService(object):
    """Resource Management Service
    """

    @staticmethod
    def GetClusterResources(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/poneglyph.ResourceManagementService/GetClusterResources',
            poneglyph__pb2.ClusterResourcesRequest.SerializeToString,
            poneglyph__pb2.ClusterResourcesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AllocateResources(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/poneglyph.ResourceManagementService/AllocateResources',
            poneglyph__pb2.ResourceAllocationRequest.SerializeToString,
            poneglyph__pb2.ResourceAllocationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReleaseResources(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/poneglyph.ResourceManagementService/ReleaseResources',
            poneglyph__pb2.ResourceReleaseRequest.SerializeToString,
            poneglyph__pb2.ResourceReleaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
